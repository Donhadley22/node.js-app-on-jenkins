# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      SCAN_TYPE:
        description: 'Type of scan to perform'
        required: true
        default: 'Baseline'
        type: choice
        options:
          - Baseline
          - APIS
          - Full
      TARGET:
        description: 'Target URL to scan'
        required: true
        default: 'http://54.167.188.22:3000/'
        type: string
      GENERATE_REPORT:
        description: 'Generate HTML report'
        required: true
        default: true
        type: boolean

env:
  DOCKER_IMAGE: donhadley/chucknorris-jokes
  DOCKERFILE: Dockerfile
  DOCKER_TAG: ${{ github.run_number }}
  EC2_REGION: us-east-1
  EC2_USER: ubuntu
  EC2_HOST: 54.167.188.22
  CONTAINER_NAME: chucknorris-app
  HOST_PORT: 3000
  CONTAINER_PORT: 3000
  SONAR_PROJECT_KEY: nodejs-app-sonar
  SONAR_HOST_URL: http://18.234.225.42:9000/
  TARGET: ${{ github.event.inputs.TARGET || 'http://54.167.188.22:3000/' }}

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '23'
        cache: 'npm'

    - name: Install Dependencies
      run: npm install

    - name: Run Tests
      run: npm test

    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        npm install -g sonar-scanner
        sonar-scanner \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }}

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: docker build -t $DOCKER_IMAGE:$DOCKER_TAG -f $DOCKERFILE .

    - name: Push Docker Image
      run: docker push $DOCKER_IMAGE:$DOCKER_TAG

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

    - name: Run ZAP Scan
      run: |
        docker pull zaproxy/zap-stable
        chmod 777 $(pwd)
        docker run --rm -v $(pwd):/zap/wrk/:rw zaproxy/zap-stable \
          zap-${{ github.event.inputs.SCAN_TYPE || 'baseline' }}.py \
          -t ${{ github.event.inputs.TARGET || env.TARGET }} \
          -r report.html -I

    - name: Publish ZAP Report
      if: success()
      run: |
        if [ -f report.html ]; then
          echo "ZAP scan report generated."
        else
          echo "ZAP scan report not found."
          exit 1
        fi

    - name: Archive ZAP Report
      if: ${{ github.event.inputs.GENERATE_REPORT == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: report.html





        

